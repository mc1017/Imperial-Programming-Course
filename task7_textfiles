19
4
3
11
6

//7.1
//testing basic reading from text files
#include <iostream>
#include <fstream>
// header fstream needed for working with text files


int main(){
    std::ifstream infile; 
    // we declare the object that will represent the text file
    // of type std::ifstream (infile is not a special name)
 
    infile.open("Task 7");
    // we associate the object called infile
    // to the text file called input.txt
 
    // now before we go any further it's important to check
    // whether the operation opening the file really worked
    // (if for example we misspell the name then the program
    // doesn't work and we don't know why
 
    // please note that difference between function open (above)
    // and function is_open (below)
 
    if(infile.is_open()){ 
        // if the operation was successful
        // we can read the content of the file
        // this is done in a remarkably 
        // similar way to using std::cin
 
        int tmp;
 
        infile >> tmp;
        std::cout << tmp << std::endl; 
        // this will read and then print 
        // the first number in the file
        // (which in the example above is 10)
 
        infile >> tmp;
        std::cout << tmp << std::endl;
        // this will read and then print 
        // the second number in the file
        // (which in the example above is 4)
        infile >> tmp;
        std::cout << tmp << std::endl;
        infile >> tmp;
        std::cout << tmp << std::endl;
        infile.close(); 
        // we close the file when we are done
 
    }
    else{
        std::cout << "error opening file" << std::endl;
    }
 
}


# include <iostream>
# include <fstream>

int main(){
  std::ifstream infile;
  infile.open("Task 7");

  if(infile.is_open()){ 
    int tmp;
    //only prints int in the doc. if it finished reading integers, it wont read further.
    //std::string tmp prints everything in the doc
    while (infile>>tmp){
      std::cout<<tmp<<std::endl;
    }
    // the condition in the loop below is an idiomatic way
    // of reading from text files in C++ until the endl

    // (infile >> tmp) at the same time performs the reading attempt
    // and returns a value that is evaluated as a boolean

    // if the reading attempt is successful then
    // the content is stored in tmp 
    // and what is returned
    // evaluates to true 
    // (so we keep going with the loop)

    // if the reading attempt is unsuccessful then
    // nothing new is stored in tmp
    // and what is returned
    // evaluates to false
    // (so the loop terminates)
    infile.close();
  }
  else{
    std::cout<<"Error opening files"<<std::endl;
    
  }

}

//Exit Failure
#include <iostream>
#include <fstream>
#include <cstdlib>
// cstdlib header needed for EXIT_FAILURE
 
int main(){
    std::ifstream infile; 
    infile.open("Task 7");
 
    if(!infile.is_open()){ // note the !: "if the file is not open"...
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
        // ...after we print an error message
        // we use the return to terminate function main
        // with code EXIT_FAILURE that represents something going wrong
 
    }
 
    // if the return is executed above (because the program enters the if)
    // then the following lines are not executed
 
    // the following lines are the same as in the corresponding example above
 
    int tmp;
 
    while(infile >> tmp){
        std::cout << tmp << std::endl;
    }
 
    infile.close();
}

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
 
int main(){
    std::ifstream infile; 
    infile.open("Task 7");
 
    std::vector<int> v;
 
    if(!infile.is_open()){ 
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }
 
    int tmp;
 
    while(infile >> tmp){
        v.push_back(tmp); 
        // instead of printing the values
        // as in the example above
        // first we store them in a vector
    }
    for (int i=v.size()-1; i>=0;i--){
      std::cout<<v[i]<<std::endl;
    }
    infile.close(); 
 
    // TODO: print the content of v in reversed order
 
}

//7.2
//Output File
#include <iostream>
#include <fstream>
#include <cstdlib>
 
int main(){
    std::ofstream outfile;
    // outfile is not a special name
 
    outfile.open("Output file");
    // this will associate outfile to a file called output.txt
    // if the file doesn't exist it is created
    // if the file already exists it will be overwritten!
 
    if(!outfile.is_open()){
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }
 
    outfile << "hello" << std::endl;
    // prints on the output file
 
    outfile.close();
    // (hint: if your file doesn't have the expected content
    // you have probably forgotten to call the close() function)
}

//Read content from a file and print it into another one
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
 
int main(){
    std::ifstream infile; 
    infile.open("Task 7");
 
    std::vector<int> v;
 
    if(!infile.is_open()){ 
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }
 
    int tmp;
 
    while(infile >> tmp){
        v.push_back(tmp); 
        // instead of printing the values
        // as in the example above
        // first we store them in a vector
    }
    
    
    infile.close();
   
    std::ofstream outfile; 
    outfile.open("Output file");

    if(!outfile.is_open()){
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }

    for (int i=v.size()-1; i>=0;i--){
      outfile<<v[i]<<std::endl;
    }
    outfile.close();
    
 
    
 
    // TODO: print the content of v in reversed order
    // onto a different text file
 
}


//Ask user to input the name of the file
//std::getline(std::cin,n) to read input with space
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <string> 
 
int main(){
 
  std::string inputfilename;
  // as usual not a special name
  std::cout << "enter name of input file" << std::endl;

  
  std::getline(std::cin,inputfilename);
  //To store string with a space in between
  
  std::ifstream infile; 
  std::cout<<"Filename: "<<inputfilename<<std::endl;
  infile.open(inputfilename);
  std::vector<int> v;

  if(!infile.is_open()){ 
    std::cout << "error opening infile" << std::endl;
    return EXIT_FAILURE;
  }

  int tmp;
  while(infile >> tmp){
    v.push_back(tmp); 
  }
  infile.close();
  
  std::ofstream outfile; 
  outfile.open("Output file");

  if(!outfile.is_open()){
    std::cout << "error opening outfile" << std::endl;
    return EXIT_FAILURE;
  }

  for (int i=v.size()-1; i>=0;i--){
    outfile<<v[i]<<std::endl;
  }
  outfile.close();   
}